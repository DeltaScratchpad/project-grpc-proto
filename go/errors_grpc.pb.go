// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: errors.proto

package pipeline_errors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ErrorReporterClient is the client API for ErrorReporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorReporterClient interface {
	ReportError(ctx context.Context, in *Error, opts ...grpc.CallOption) (*ErrorReportResponse, error)
}

type errorReporterClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorReporterClient(cc grpc.ClientConnInterface) ErrorReporterClient {
	return &errorReporterClient{cc}
}

func (c *errorReporterClient) ReportError(ctx context.Context, in *Error, opts ...grpc.CallOption) (*ErrorReportResponse, error) {
	out := new(ErrorReportResponse)
	err := c.cc.Invoke(ctx, "/pipeline_errors.ErrorReporter/ReportError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorReporterServer is the server API for ErrorReporter service.
// All implementations must embed UnimplementedErrorReporterServer
// for forward compatibility
type ErrorReporterServer interface {
	ReportError(context.Context, *Error) (*ErrorReportResponse, error)
	mustEmbedUnimplementedErrorReporterServer()
}

// UnimplementedErrorReporterServer must be embedded to have forward compatible implementations.
type UnimplementedErrorReporterServer struct {
}

func (UnimplementedErrorReporterServer) ReportError(context.Context, *Error) (*ErrorReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportError not implemented")
}
func (UnimplementedErrorReporterServer) mustEmbedUnimplementedErrorReporterServer() {}

// UnsafeErrorReporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorReporterServer will
// result in compilation errors.
type UnsafeErrorReporterServer interface {
	mustEmbedUnimplementedErrorReporterServer()
}

func RegisterErrorReporterServer(s grpc.ServiceRegistrar, srv ErrorReporterServer) {
	s.RegisterService(&ErrorReporter_ServiceDesc, srv)
}

func _ErrorReporter_ReportError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Error)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorReporterServer).ReportError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline_errors.ErrorReporter/ReportError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorReporterServer).ReportError(ctx, req.(*Error))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrorReporter_ServiceDesc is the grpc.ServiceDesc for ErrorReporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrorReporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pipeline_errors.ErrorReporter",
	HandlerType: (*ErrorReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportError",
			Handler:    _ErrorReporter_ReportError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "errors.proto",
}
