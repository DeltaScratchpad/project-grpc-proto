syntax = "proto3";

package pipeline_data;

option go_package = "project/grpc-proto/pipeline_data";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// A single instruction to be executed by a pipeline stage
message CommandStep {
  // The name provided by the user (typically the first argument)
  string name = 1;
  // All other values provided to the function by the user
  string args = 2;
  // Location at which the function will be contacted
  string url = 3;
}

// A list of commands to be executed by a pipeline stage
message CommandList {
  // The unique identifier for the query
  string query_id = 1;
  // The list of commands to be executed
  repeated CommandStep commands = 2;
  // The current step to be executed. 
  // Recipients should execute the command at this index.
  uint32 step = 3;
  // The URL at which errors should be reported
  string error_url = 4;
}

// A single event to be processed by a pipeline stage.
// Events are the primary data type used in the pipeline.
// Events are typically generated by a source, 
// and are processed by a series of stages.
// All fields are optional, 
// however, if no fields are present the event should be dropped / ignored.
message Event {
  // The raw log line which generated the event.
  // Typically generated by the detetion system being monitored.
  optional string raw = 1;
  // The time at which an event was recieved by the event indexer.
  optional google.protobuf.Timestamp index_time = 2;
  // The time that the event occured on the source system.
  optional google.protobuf.Timestamp timestamp = 3;
  // The format of event, such as an nginx access log, or a syslog message.
  optional string event_type = 4;
  // The category of the event for indexing / organisation.
  // For example, "main_server", "subnet_b_flow_logs", etc.
  optional string category = 5;
  // Additional fields which were extracted from the raw event.
  optional google.protobuf.Struct derived = 6;
}

// A batch of events to be processed by a pipeline stage.
// Includes instructions regarding how to handle the events.
message BatchProcessingEvent {
  // The commands to be executed.
  CommandList commands = 1;
  // A list of events to be processed according to the relevant command.
  repeated Event events = 2;
}


